- name: install bind
  package:
    name: bind
    state: present
  notify: named enable

- name: add firewall exception for DNS
  firewalld:
    service: dns
    permanent: true
    state: enabled
  notify:
    - reload firewalld
    
- name: dnssec - check for keys
  delegate_to: localhost
  stat:
    path: keys
  register: dnssec_keys
  run_once: true

- name: dnssec - create temp keys dir
  file:
    path: /tmp/keys
    state: directory
    mode: '0770'
  when: not dnssec_keys.stat.exists
  run_once: true

- name: dnssec - generate ZSK
  command:
    cmd: dnssec-keygen -3 -a RSASHA256 -b 2048 -n ZONE jb3.dev
    chdir: /tmp/keys
  when: not dnssec_keys.stat.exists
  run_once: true

- name: dnssec - generate KSK
  command:
    cmd: dnssec-keygen -3 -f KSK -a RSASHA256 -b 4096 -n ZONE jb3.dev
    chdir: /tmp/keys
  when: not dnssec_keys.stat.exists
  run_once: true

- name: dnssec - fetch generated keys
  ansible.posix.synchronize:
    mode: pull
    src: /tmp/keys
    dest: "{{ playbook_dir }}"
  when: not dnssec_keys.stat.exists
  run_once: true

- name: dnssec - remove remote key directory
  file:
    state: absent
    path: /tmp/keys
  when: not dnssec_keys.stat.exists
  run_once: true

- name: ensure bind log dir
  file:
    path: /var/log/named
    group: named
    owner: named
    mode: '0775'
    state: directory

- name: tsig - create local tsig directory
  file:
    path: "{{ playbook_dir }}/tsigs"
    state: directory
    mode: '0770'
  run_once: true
  delegate_to: localhost

- name: tsig - generate tsigs
  command: tsig-keygen -a HMAC-SHA512 {{ item["name"] }}.
  register: generated_tsigs
  run_once: true
  when: true
  with_items:
    - "{{ tsigs }}"

- name: tsig - save non-existant tsigs locally
  run_once: true
  no_log: true
  delegate_to: localhost
  copy:
    content: "{{ item['stdout'] }}"
    dest: "{{ playbook_dir }}/tsigs/{{ item['item']['name'] }}.tsig"
    force: no
    mode: '0770'
  with_items:
    - "{{ generated_tsigs['results'] }}"

- name: fetch kanye quotes
  uri:
    url: https://api.kanye.rest/
  register: kanye_quote

- name: bind config
  template:
    src: named.conf.j2
    dest: /etc/named.conf
    mode: '0664'
  vars:
    tsig_files: "{{ lookup('fileglob', playbook_dir + '/tsigs/*', wantlist=True) }}"
  notify:
    - named update

- name: dnssec - copy keys to remote
  copy:
    directory_mode: '0770'
    mode: '0770'
    owner: named
    group: named
    src: '{{ playbook_dir }}/keys'
    dest: /etc/named

- name: ensure named configuration directory exists
  file:
    path: /var/named
    group: named
    owner: named
    state: directory
    mode: '0775'

- name: grab copy of live dynamic DNS journals
  find:
    paths: /var/named
    patterns: "*"
  register: named_glob

- name: delete DNS zone and all journals
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ named_glob.files }}"

- name: generate new zone file
  template:
    src: master.jb3.dev.zone.j2
    dest: /var/named/master.jb3.dev
    owner: named
    group: named
    mode: '0644'
  notify:
    - named update

- name: rndc - check for rndc configuration
  stat:
    path: /etc/rndc.key
  register: rndc_configuration

- name: rndc - generate rndc configuration
  command: rndc-confgen -a
  register: rndc_generated
  when: not rndc_configuration.stat.exists

- name: rndc - ensure ownership of config key
  file:
    path: /etc/rndc.key
    owner: named
    group: named
    mode: '0600'

- name: named - enable named
  service:
    name: named
    state: started
    enabled: yes

- name: dnssec - configure NSEC3 parameters
  command: rndc signing -nsec3param 1 0 0 - jb3.dev
  when: true
