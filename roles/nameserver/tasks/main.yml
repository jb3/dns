- name: install bind
  apt:
    name: bind9
    state: present
  notify: bind enable

- name: install rsync
  apt:
    name: rsync
    state: present

- name: disable named apparmor (symlink)
  file:
    src: /etc/apparmor.d/usr.sbin.named
    dest: /etc/apparmor.d/disable/usr.sbin.named
    state: link
  notify:
    - disable named apparmor

- name: dnssec - check for keys
  delegate_to: localhost
  stat:
    path: keys
  register: dnssec_keys
  run_once: true

- name: dnssec - create temp keys dir
  file:
    path: /tmp/keys
    state: directory
    mode: '0770'
  when: not dnssec_keys.stat.exists
  run_once: true

- name: dnssec - generate ZSK
  command:
    cmd: dnssec-keygen -3 -a RSASHA256 -b 2048 -n ZONE jb3.dev
    chdir: /tmp/keys
  when: not dnssec_keys.stat.exists
  run_once: true

- name: dnssec - generate KSK
  command:
    cmd: dnssec-keygen -3 -f KSK -a RSASHA256 -b 4096 -n ZONE jb3.dev
    chdir: /tmp/keys
  when: not dnssec_keys.stat.exists
  run_once: true

- name: dnssec - fetch generated keys
  ansible.posix.synchronize:
    mode: pull
    src: /tmp/keys
    dest: "{{ playbook_dir }}"
  when: not dnssec_keys.stat.exists
  run_once: true

- name: dnssec - remove remote key directory
  file:
    state: absent
    path: /tmp/keys
  when: not dnssec_keys.stat.exists
  run_once: true

- name: ensure bind log dir
  file:
    path: /var/log/named
    group: bind
    owner: bind
    mode: '0775'
    state: directory

- name: tsig - create local tsig directory
  file:
    path: "{{ playbook_dir }}/tsigs"
    state: directory
  run_once: true
  delegate_to: localhost

- name: tsig - generate tsigs
  shell: tsig-keygen -a HMAC-SHA512 {{ item["name"] }}.
  register: generated_tsigs
  run_once: true
  with_items:
    - "{{ tsigs }}"

- name: tsig - save non-existant tsigs locally
  run_once: true
  no_log: true
  delegate_to: localhost
  copy:
    content: "{{ item['stdout'] }}"
    dest: "{{ playbook_dir }}/tsigs/{{ item['item']['name'] }}.tsig"
    force: no
  with_items:
    - "{{ generated_tsigs['results'] }}"

- name: fetch kanye quotes
  uri:
    url: https://api.kanye.rest/
  register: kanye_quote

- name: bind config
  template:
    src: named.conf.j2
    dest: /etc/bind/named.conf
    mode: '0664'
  vars:
    tsig_files: "{{ lookup('fileglob', playbook_dir + '/tsigs/*', wantlist=True) }}"
  notify:
    - bind update

- name: dnssec - copy keys to remote
  copy:
    directory_mode: '0770'
    mode: '0770'
    owner: bind
    group: bind
    src: '{{ playbook_dir }}/keys'
    dest: /etc/bind

- name: ensure named configuration directory exists
  file:
    path: /var/named
    group: bind
    owner: bind
    state: directory
    mode: '0775'

- name: grab copy of live dynamic DNS journals
  find:
    paths: /var/named
    patterns: "*"
  register: named_glob

- name: delete DNS zone and all journals
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ named_glob.files }}"

- name: generate new zone file
  template:
    src: master.jb3.dev.zone.j2
    dest: /var/named/master.jb3.dev
    owner: bind
    group: bind
    mode: '0775'
  notify:
    - bind update

- name: dnssec - generate random hexadecimal string for nsec3param
  set_fact:
    dnssec_salt: "{{ query('community.general.random_string', length=16, upper=false, lower=false, override_special=hex_chars, numbers=false) }}"
  vars:
    hex_chars: '0123456789ABCDEF'

- name: dnssec - configure NSEC3 parameters
  shell: rndc signing -nsec3param 1 0 10 {{ dnssec_salt[0] }} jb3.dev
