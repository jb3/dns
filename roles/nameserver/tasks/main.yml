---
- name: Install bind
  ansible.builtin.package:
    name: bind
    state: present
  notify: Named enable

- name: Add firewall exception for DNS
  ansible.posix.firewalld:
    service: dns
    permanent: true
    state: enabled
  notify:
    - Reload firewalld

- name: Dnssec - check for keys
  delegate_to: localhost
  ansible.builtin.stat:
    path: keys
  register: dnssec_keys
  run_once: true

- name: Dnssec - create temp keys dir
  ansible.builtin.file:
    path: /tmp/keys
    state: directory
    mode: "0770"
  when: not dnssec_keys.stat.exists
  run_once: true

- name: Dnssec - generate ZSK
  ansible.builtin.command:
    cmd: dnssec-keygen -3 -a RSASHA256 -b 2048 -n ZONE jb3.dev
    chdir: /tmp/keys
  when: not dnssec_keys.stat.exists
  changed_when: true
  run_once: true

- name: Dnssec - generate KSK
  ansible.builtin.command:
    cmd: dnssec-keygen -3 -f KSK -a RSASHA256 -b 4096 -n ZONE jb3.dev
    chdir: /tmp/keys
  when: not dnssec_keys.stat.exists
  changed_when: true
  run_once: true

- name: Dnssec - fetch generated keys
  ansible.posix.synchronize:
    mode: pull
    src: /tmp/keys
    dest: "{{ playbook_dir }}"
  when: not dnssec_keys.stat.exists
  run_once: true

- name: Dnssec - remove remote key directory
  ansible.builtin.file:
    state: absent
    path: /tmp/keys
  when: not dnssec_keys.stat.exists
  run_once: true

- name: Ensure bind log dir
  ansible.builtin.file:
    path: /var/log/named
    group: named
    owner: named
    mode: "0775"
    state: directory

- name: Tsig - create local tsig directory
  ansible.builtin.file:
    path: "{{ playbook_dir }}/tsigs"
    state: directory
    mode: "0770"
  run_once: true
  delegate_to: localhost

- name: Tsig - generate tsigs
  ansible.builtin.command: tsig-keygen -a HMAC-SHA512 {{ item["name"] }}.
  register: generated_tsigs
  run_once: true
  changed_when: true
  with_items:
    - "{{ nameserver_tsigs }}"

- name: Tsig - save non-existant tsigs locally
  run_once: true
  no_log: true
  delegate_to: localhost
  ansible.builtin.copy:
    content: "{{ item['stdout'] }}"
    dest: "{{ playbook_dir }}/tsigs/{{ item['item']['name'] }}.tsig"
    force: false
    mode: "0770"
  with_items:
    - "{{ generated_tsigs['results'] }}"

- name: Fetch kanye quotes
  ansible.builtin.uri:
    url: https://api.kanye.rest/
  register: kanye_quote

- name: Bind config
  ansible.builtin.template:
    src: named.conf.j2
    dest: /etc/named.conf
    mode: "0664"
  vars:
    tsig_files: "{{ lookup('fileglob', playbook_dir + '/tsigs/*', wantlist=True) }}"
    secondaries: "{{ groups['dns'] | map('extract', hostvars, ['ansible_host']) | reject('==', ansible_host) | join('; ') }}"
  notify:
    - Named update

- name: Dnssec - copy keys to remote
  ansible.builtin.copy:
    directory_mode: "0770"
    mode: "0770"
    owner: named
    group: named
    src: "{{ playbook_dir }}/keys"
    dest: /etc/named

- name: Ensure named configuration directory exists
  ansible.builtin.file:
    path: /var/named
    group: named
    owner: named
    state: directory
    mode: "0775"

- name: Grab copy of live dynamic DNS journals
  ansible.builtin.find:
    paths: /var/named
    patterns: "*"
  register: named_glob

- name: Delete DNS zone and all journals
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ named_glob.files }}"

- name: Generate new zone file
  ansible.builtin.template:
    src: master.jb3.dev.zone.j2
    dest: /var/named/master.jb3.dev
    owner: named
    group: named
    mode: "0644"
  notify:
    - Named update

- name: Rndc - generate rndc configuration
  ansible.builtin.command: rndc-confgen -a
  register: rndc_generated
  args:
    creates: /etc/rndc.key

- name: Rndc - ensure ownership of config key
  ansible.builtin.file:
    path: /etc/rndc.key
    owner: named
    group: named
    mode: "0600"

- name: Named - enable named
  ansible.builtin.service:
    name: named
    state: started
    enabled: true

- name: Dnssec - configure NSEC3 parameters
  ansible.builtin.command: rndc signing -nsec3param 1 0 0 - jb3.dev
  changed_when: true
  when: true
